{"m_szDocID":"1905777","m_szDocTitle":"Parallelizing loops in the presence of possible memory aliases - Analog Devices Technology","m_szYear":"2013","m_szDocSumamry":"Parallelizing loops in the presence of possible memory aliases European Patent Application EP2778907 A2 Abstract: In one particular example, this disclosure provides an efficient mechanism to determine the degree of parallelization possible for a loop in the presence of possible memory aliases that cannot be resolved at compile-time. Hardware instructions are provided that test memory addresses at run-time and set a mode or register that enables a single instance of a loop to run the maximum number of SIMD (Single Instruction, Multiple Data) lanes to run in parallel that obey the semantics of ","m_szDocBody":"parallelizing loop presence memory aliase european patent application abstract example disclosure efficient mechanism determine degree parallelization loop presence memory aliase resolved compiletime hardware instruction provided test memory addresse runtime set mode enable single instance loop run maximum number simd single instruction multiple data lane run parallel obey semantic original scalar loop hardware feature extend applicability performance instruction enumerated inventor perkin michael stevenson avenue edinburgh redford john norfolk road arlington sanghai kaushal oak streetapt somerville application number analogue device technology floor par ville place par ville road hamilton international classe beck simon antony wither roger llp london riverside london claim method determine degree parallelization loop presence memory aliase comprising providing hardware instruction test memory addresse runtime setting mode enable single instance loop run maximum number single instruction multiple data simd lane run parallel obey semantic original scalar loop method amount parallelization enabled determined runtime test pointer aliasing method maximum number vector lane enabled obtain maximum speedup subject obeying loopcarried dependency original scalar loop method processor configured determine vector lane enabled reproduce semantic scalar loop method preceding claim hardware mechanism vector lane enabled hardware include mode number lane enabled hardware include mask control lane enabled method hardware mechanism set mode enable maximum number vector lane dependent test memory addresse runtime method hardware mechanism altering number iteration loop dependent number lane enabled method apply simd staged loop loop run vector length multiple vectorization factor increment induction variable scaled number vector lane enabled loop method include performing reduction include summation bitwise operation minimum maximum vector lane enabled mode register method include copying vector lane iteration loop memory location apparatus determining degree parallelization loop presence memory aliase comprising processing element executing hardware instruction test memory addresse runtime mode set enable single instance loop run maximum number single instruction multiple data simd lane run parallel obey semantic original scalar loop apparatus amount parallelization enabled determined runtime test pointer aliasing apparatus mode specify vector lane enabled mode comprise mode number lane enabled mode comprise mask control lane enabled apparatus processing element mechanism set mode enable maximum number vector lane dependent test memory addresse runtime processing element mechanism altering number iteration loop dependent number lane enabled apparatus processing element perform reduction include summation bitwise operation minimum maximum vector lane enabled mode register apparatus processing element copy vector lane iteration loop memory location machine readable instruction causing hardware perform method claim description application claim priority application entitled method parallelize loop presence memory aliase filed technical field disclosure relate generally parallel processing and particularly parallelizing loop background modern hardware technology ability increase processing speed multiple processing element pes perform separate parallel operation processing referred parallel processing parallelization order advantage potential speedup processing parallelization compiler determine source code parallelized example compiler parallelize loopreferred vectorizationif iteration loop depend previous iteration loop dependency form memory aliasesie multiple pointer reference single memory address compiler attempt prove compiletime potential memory aliase exist compiler generate parallel code description drawing disclosure understood detailed description accompanying figure emphasised that accordance standard practise industry feature drawn scale illustration purpose only fact dimension feature arbitrarily increased reduced clarity discussion flow chart exemplary logic parallelizing loop presence memory aliase embodiment specification block exemplary hardware implementation comprising number lane enabled embodiment specification illustrate exemplary result running code compiled implementation specification hardware processing element parallel illustrate exemplary result running code compiled implementation specification hardware processing element parallel illustrate exemplary result running code compiled implementation specification hardware processing element parallel detailed description overview aspect specification disclosed method determine degree parallelization loop presence memory aliase comprising providing hardware instruction test memory addresse runtime setting mode enable single instance loop run maximum number single instruction multiple data simd lane run parallel obey semantic original scalar loop aspect specification disclosed apparatus determining degree parallelization loop presence memory aliase comprising processing element executing hardware instruction test memory addresse runtime mode set enable single instance loop run maximum number single instruction multiple data simd lane run parallel obey semantic original scalar loop aspect specification disclosed machine readable nontransitory storage medium instruction stored thereon determining degree parallelization loop presence memory aliase instruction executed processor processor perform operation execute hardware instruction test memory addresse runtime set mode enable single instance loop run maximum number single instruction multiple data simd lane run parallel obey semantic original scalar loop detailed description embodiment highlevel language express programme semantic operate scalar type example function add vector implemented follow void addint int int int theory individual addition element vector performed parallel however this compiler determine memory aliase input output vector memory addresse input vector output vector overlap other case above pointer example point related areas memory happen example call function were add&a case loopcarried dependence addition loop iteration loop depend result computed previous iteration loop summation element parallel compiler attempt prove compiletime potential aliase exist parallel code created however potential aliase remain unresolvable compiletime approaches relate addressing aliase unresolvable compiletime prevent vectorization compiler provide information programmer unresolvable alias prevented vectorization form compiler remark assembly annotation programmer change code source restrict qualifier pragmas technique compiler resolve alias however case programmer unaware code work especially maintaining thirdparty code moreover approach lend case alias exist present compiler emit runtime test aliase emit version loop vectorized scalar version version loop execute depending alias existed not challenge approach codesize expansion lack scalability wide vector length loop vectorization factor create efficient code alias distance wide vector machine conditionally turning simd mode hardware support sharc challenge cope vector lane enabled scalar mode vector lane enabled vector mode provide special instruction detect aliase efficient manner iii implement feature special operation dependent number vector lane enabled thus approach setup tear cost vectorize potentially vectorizable loop accordingly case compiler prove aliase exist input output array therefore compiler conservative emit scalar code serial code case alias exist occur time function invoked therefore function execute parallel invocation execute serially challenge obtain speedup parallelization producing correct code case alias exist solution add hardware support simd processor processor support single instruction multiple data instruction multiple pes simd withinaregister swar single loop run scalar mode multiple simd lane vector lane enabled amount parallelization enabled determined runtime test pointer aliasing advantageously enable single loop execute correctly input output array happen memory aliase exist moreover maximum number vector lane enabled obtain maximum speedup subject obeying loopcarried dependency original scalar loop implementation specification evident instruction set architecture isa chip visible set specific instruction implemented way splitting alias test multiple instruction combining multiple alias test veclen limited power two discussed specification instruction utilised test aliase determine vector length mask accordingly moreover instruction implemented specification permit variable vector length loop implementation hardware loop run scalar mode multiple simd lane example function add defined above call site add&a add&a executing call add&a processor determine iteration memory based size object primitive array vector lane enabled reproduce original scalar semantic loop therefore loop execute scalar mode however call add&a processor determine iteration loop executed parallel semantic scalar loop therefore vector lane enabled loop provide increase speed factor four thus hardware enable test memory addresse runtime enable single instance loop run maximum number simd lane run parallel obey semantic original scalar loop below disclosure embodiment including nonlimiting feature feature hardware mechanism vector lane enabled veclen example mechanism mode number lane enabled mask control lane enabled feature hardware mean set mode enable maximum number vector lane based test memory addresse runtime addition feature improve efficiency applicability loop feature hardware mean altering number iteration loop dependent number lane enabled number lane enabled based feature example processor hardware support counted loop dedicated loop count register loop count initialised dividing number scalar iteration number vector lane enabled parallel feature simd staged loop ability loop run vector length multiple vectorization factor number vector lane enabled runtime feature increment induction variable represent memory addresse loop scaled number vector lane enabled loop feature mean perform reduction summation bitwise operation minimum maximum vector lane enabled mode register feature mean copy vector lane iteration loop memory location turning attached figure flow chart exemplary logic parallelizing loop presence memory aliase embodiment specification example logic comprise start point determining potentially parallelizable loop remain function emitting parallel version loop perform veclen number iteration parallel determining potential aliase resolvable compiletime set hardware veclen equal maximum compatible hardware setting hardware veclen equal minimum alias distance pointer end point logic implemented part compiler runtime engine runtime environment processor moreover procedure portion thereof distributed component logic begin start point start point coincide point logic routine application thread addition start point data object value variable etc initialised retrieved accessed logic next procedure determined potentially parallelizable loop remain function potentially parallelizable loop are loop parallelizable aliase exist pointer input loop based determination logic emit code parallelized loop however potentially parallelizable loop remain function logic proceed end point determined potentially parallelizable loop remain function logic emit parallel version loop perform veclen number iteration procedure respect feature hardware number vector lane enabled mode veclen register code emitted procedure utilise veclen determine number iteration loop parallelize runtime advantageously logic emit single version code number parallel iteration loop determined runtime based hardware register single version code flexibility execute code serially veclen parallel veclen based test addresse runtime compiletime determined potential aliase resolvable procedure discussed above sufficient information prove aliase exist compiletime however logic prove compiletime aliase exit emit code parallelize code procedure example loop accesse global array provably independent memory logic determine potential aliase loop resolvable compile time determined potential aliase resolvable veclen set equal maximum compatible hardware procedure example compiled code execute hardware processing element vector lane maximum veclen compatible hardware pes vector lane case logic set veclen parallelizing loop iteration loop performed parallel veclen mode number lane enabled mask control lane enabled determined potential aliase resolvable veclen set equal minimum alias distance pointer procedure pointer compared pointer accessed loop example pairwise comparison made pointer pointer turn determine set potential value veclen veclen set procedure implementation hardware mechanism feature value veclen set number vector lane enabled based test memory addresse runtime feature veclen set procedure logic return procedure determine potentially parallelizable loop remain function remain function not logic end end point end point serve point logic routine application thread example end point direct processor receiving subsequent query execute logic beginning start point turning implementation specification feature illustrated aforementioned vector addition add function above pseudocode correspond standard scalar loop code generated function loop start loop iteration load increment address element array load increment address element array add vector element store increment address element array endloop note correspond data register correspond addressing register memory address implementation hardware augmented mode veclen register number vector lane enabled feature example mode veclen referred logic procedure scalar code mode set single vector lane enabled state loop reached simplicity assumption made architecture hardware comprise number identical pes file duplicated therefore example thought set register place pes file example block exemplary hardware implementation comprising mode number lane enabled embodiment specification example hardware comprise veclen processing element swar lane processing element swar lane processing element swar lane processing element pen swar lane processing element hardware swar lane thus total number swar lane system equal time veclen control enabling processing element swar lane example veclen set swar lane enabled total swar lane accordingly swar lane enabled swar lane disabled stored veclen set enable maximum number simd lane vector lane obey semantic original scalar loop based test memory addresse runtime veclen shown state set equal however veclen updated number based test pointer runtime veclen set veclen number vector lane veclen ptr ptr veclen ptr veclen implementation determine pointer ptr greater pointer ptr comparing value pointer ptr ptr example language pointer memory address comparing value pointer effect compare memory addresse further implementation determine difference addresse measured multiple size number vector lane enabled veclen distance expressed bit byte multiple data type example pointer array integer int value byte ptrptr byte system divide difference size int memory byte determine represent number lane run parallel obeying semantic original scalar loop function running hardware vector lane enabled veclen result number vector lane enabled true address ptr greater address ptr number lane run parallel number vector lane enabled veclen set determined number lane run parallel true veclen set current veclen veclen remain unchanged therefore veclen set maximise number lane run parallel thus implementation alias demonstrate exemplary instruction test memory addresse runtime set mode veclen enable single instance loop run maximum number simd lane run parallel obey semantic original scalar loop likewise test set mask control lane enabled testing address register aliase implemented follow veclen maxvectorlanesonprocessor machine capable vector lane processing parallel set veclen aliasi set veclen veclen veclen aliasi set veclen veclen note example sequence set veclen case sequence set veclen alias function set veclen based test memory addresse way define instruction aspect disclosure relate instruction test value memory addresse runtime permit setting vector lane enable mode based difference addresse alternatively implementation instruction test memory addresse register aliase set mode sisd mode simd mode instruction determine difference addresse vectorization based determination instruction set mode opposed addition setting number vector lane example difference permit single loop processed time instruction set mode equal sisd mode however difference permit process time instruction set mode equal simd mode determination made runtime set mode mode register implementation feature number iteration loop altered based number lane enabled example pseudocode correspond exemplary loop setup feature case trip count divided number vector lane enabled veclen determine number iteration loop combined simd staged loop feature value multiple veclen feature turn vector lane iteration loop cope final odd element note instruction loop increment address register increment veclen feature mean iteration computed veclen element addition address register updated point set element vector address increment value automatically scaled current veclen enable functionality illustrate feature used pseudocode correspond scalarproduct computation added vector addition loop int addanddpint int int int sum int sum return sum pseudocode correspond code vectorizing addanddp function implementation specification code demonstrate exemplary sidesum function perform sideway reduction scalar code veclen parallel code veclec sidesum instruction implemented feature add veclen number element vector running sum result pes instruction avoided based specific initialization pes register subsequent sidesum vector lane advantage separate instruction possibility optimise latency instruction depending runtime veclen demonstrate point sidesumr simple copy veclen addition value veclen longer former feature demonstrated pseudocode loop mechanism cope arbitrary vector length loop mechanism implemented feature int addandlastint int int int tmp int tmp tmp return tmp note returned function tmp computed loop vector lane result computed depend veclen set hence compile time way cope situation firstly instruction store memory copy defined occur highestnumbered enabled vector lane example enabled disabled store pes memory location enabled disabled store pes pes alternatively instruction original trip count veclen determine vector lane reside copy pes example veclen copy pes pes compiler implemented specification emit code parallelize function degree parallelization determined runtime based hardware register example function copy value vector vector implemented follow void cpyint out int int outi ini compiler compile emit procedure logic version code cpy parameter parameter veclen veclen aliasp sizeofint equal byte loop load ini store outi endloop return address register data register compiled code initialise veclen however veclen updated runtime based output alias function feature instruction alias referenced compiled code implemented exemplary instruction provided specification loop loop executed veclen number processing element parallel loop repeated number time veclen set runtime number iteration loop determined runtime feature thus compiled code execute number iteration loop parallel based veclen determined runtime illustrate exemplary result running code compiled implementation specification hardware processing element parallel particular illustrate exemplary result running code compiled code cpy input pointer hardware processing element execute parallel maximum number vector lane show cycle number column instruction executed cycle instruction address register veclen loop counter data cycle address register veclen initialised example veclen initialised equal however cycle veclen updated based comparing memory addresse maximum number processing element hardware iteration loop cycle load value array store location out array similarly loop repeated total time remaining loop completed cycle respectively finally function return cycle loop induction variable incremented value scaled number processing element vector lane enabled loop feature example cycle value incremented size based processing element enabled that example iteration loop address data element iteration address data element illustrate exemplary result running code compiled implementation specification runtime input pointer found value hardware processing element execute parallel veclen set cycle veclen set cycle difference due difference addressing value determined runtime again iteration induction variable increment scaled number processing element vector lane enabled loop feature cycle value incremented time size based processing element enabled case iteration loop address data element iteration address data element illustrate exemplary result running compiled code figure compiled implementation specification hardware processing element execute parallel exemplary output compiler determine aliase output pointer input pointer accordingly cycle veclen set maximum number processing element case cpy function perform iteration original scalar loop achieved single iteration compiled parallel code exemplary result illustrated figure single version compiled code correctly execute presence potential aliase based part hardware set runtime instruction test memory addresse runtime aliase instruction alias set activate vector lane exploit simd processing single compiled version loop discussion embodiment above register switches amplifier transistor readily replaced substituted modified order accommodate circuitry need moreover noted complementary electronic device hardware software etc offer equally viable option implementing teaching disclosure embodiment number electrical circuit figure implemented motherboard electronic device motherboard general circuit board hold component internal electronic system electronic device and further provide connector peripheral specifically motherboard provide electrical connexion component system communicate electrically suitable processor inclusive digital signal processor microprocessor supporting chipset etc memory element etc suitably coupled motherboard based configuration need processing demand computer design etc component external storage additional sensor controller display peripheral device attached motherboard plugin card cable integrated motherboard itself embodiment electrical circuit figure implemented standalone module device component circuitry configured perform specific application function implemented plugin module application specific hardware electronic device note embodiment disclosure readily included system chip soc package part whole soc represent integrate component computer electronic system single chip digital analogue mixedsignal radio frequency function provided single chip substrate embodiment include multichipmodule mcm plurality separate ics located single electronic package configured interact closely electronic package embodiment amplification functionality implemented silicon core application specific integrated circuit asic field programmable gate array fpgas semiconductor chip note activity discussed reference figure applicable integrated circuit involve signal processing execute specialised software programme algorithm processing digitised realtime data embodiment relate multidsp signal processing floating point processing processing fixedfunction processing microcontroller application etc context feature discussed applicable medical system scientific instrumentation wireless wired communication radar industrial process control audio video equipment current sensing instrumentation which highly precise digitalprocessingbased system moreover embodiment discussed provisioned digital signal processing technology medical imaging patient monitoring medical instrumentation home healthcare include pulmonary monitor accelerometer heart rate monitor pacemaker etc application involve automotive technology safety system stability control system driver assistance system braking system infotainment interior application kind furthermore powertrain system for example hybrid electric vehicle highprecision data conversion product battery monitoring control system reporting control maintenance activity etc furthermore embodiment applied digital signal processing technology limited memory resource example mobile phone mobile health tracking device digital cameras etc limited memory resource due part compact size device addition device perform complex signal processing embedded processor advantageously embodiment specification produce compact code consuming memory execute exemplary application include cropping image mobile phone analysing heart rate data mobile health tracking device applying philtre image digital camera etc advantage embodiment specification maximise amount parallelization runtime reducing time required execute application scenarios teaching disclosure applicable industrial market include process control system drive productivity energy efficiency reliability consumer application teaching signal processing circuit discussed image processing auto focus image stabilisation digital cameras camcorder etc consumer application include audio video processor home theatre system dvd recorder highdefinition television consumer application involve advanced touch screen controller type portable media device hence technology readily part smartphone tablet security system pcs gaming technology virtual reality simulation training etc imperative note specification dimension relationship outlined number processor memory element logic operation etc offered purpose teaching only information varied considerably departing spirit disclosure scope appended claim specification apply nonlimiting and accordingly construed such foregoing description embodiment reference processor component arrangement modification made embodiment departing scope appended claim description drawing are accordingly regarded illustrative restrictive sense note numerous example provided herein interaction term two three four electrical component however purpose clarity only appreciated system consolidated suitable manner similar design alternative illustrated component module element figure combined configuration broad scope specification case easier describe functionality set flow referencing limited number electrical element appreciated electrical circuit figure teaching readily scalable accommodate large number component arrangement configuration accordingly example provided limit scope inhibit broad teaching electrical circuit potentially applied myriad architecture note specification reference feature element structure module component step operation characteristic etc included one embodiment example embodiment embodiment another embodiment some embodiment various embodiment other embodiment alternative embodiment intended feature included embodiment disclosure necessarily combined embodiment numerous change substitution variation alteration modification ascertained skilled art intended disclosure encompass change substitution variation alteration modification falling scope appended claim order assist united state patent trademark office uspto and additionally reader patent issued application interpreting claim appended hereto applicant wishes note applicant intend appended claim invoke paragraph usc section exist date filing hereof word mean for step for specifically claim intend statement specification limit disclosure reflected appended claim note example implementation note optional feature apparatus implemented respect method process specific example embodiment example system provided that include suitable circuitry divider capacitor resistor inductor adc dff logic gate software hardware link etc part type computer include circuit board coupled plurality electronic component system include mean clocking data digital core data output macro clock clock macro clock mean clocking data data output macro physical interface clock clock physical interface clock mean clocking reset signal digital core reset output macro macro clock reset signal output reset signal mean sampling reset signal clock clock rate greater rate clock generate sampled reset signal mean resetting clock predetermined state physical interface response transition sampled reset signal mean for instance above include but limited suitable component discussed herein suitable software circuitry hub computer code logic algorithm hardware controller interface link bus communication pathway etc example system include memory comprise machinereadable instruction executed system perform activity discussed bove ","m_szGeo1":"United States","m_szSourceType":"source_patents","m_szSrcUrl":"http://www.freepatentsonline.com/EP2778907A2.html","m_Places":["Edinburgh","Arlington, Ma","United States","Somerville, Ma","Hamilton","London","Riverside","Pen","Along","United States C."],"m_People":["Perkins, Michael G.","Redford, John L.","Ville Place","Simon Antony"],"m_Companies":["Analog Devices Technology","Rogers Llp","Isa","Boundaries","Signal","Mcm","United States Patent And Trademark Office","Uspto","Adcs","First Data"],"m_BiGrams":["vector lane","lane enabled","processing element","iteration loop","memory addresse","number vector","maximum number","test memory","addresse runtime","scalar loop","number lane","veclen set","original scalar","memory aliase","lane run","run parallel","set mode","loop run","swar lane","loop presence","presence memory","semantic original","simd lane","number iteration","enable single","obey semantic","instruction test","implementation specification","single instance","instance loop","run maximum","instruction multiple","multiple data","parallel obey","determined runtime","exemplary result","hardware processing","potential aliase","set veclen","degree parallelization","mode enable","single instruction","illustrate exemplary","result running","compiled code","parallelization loop","hardware instruction","vector length","enabled mode","aliase exist","running code","code compiled","compiled implementation","element parallel","element vector","based test","potentially parallelizable","parallelizable loop","remain function","address register","signal processing","reset signal","parallelizing loop","number single","data simd","hardware mechanism","mode number","mask control","control lane","enabled loop","specification hardware","enabled veclen","loop feature","start point","loop remain","veclen number","lane processing","number processing","appended claim","runtime set","number simd","aliase comprising","loop method","amount parallelization","enabled determined","runtime test","test pointer","enable maximum","dependent number","induction variable","scaled number","lane iteration","memory location","parallel code","version loop","scalar mode","execute parallel","instruction set","lane example","aliase resolvable"],"m_TriGrams":["vector lane enabled","number vector lane","test memory addresse","memory addresse runtime","original scalar loop","lane run parallel","number lane enabled","loop presence memory","presence memory aliase","semantic original scalar","obey semantic original","enable single instance","single instance loop","instance loop run","loop run maximum","run maximum number","run parallel obey","parallel obey semantic","instruction test memory","number iteration loop","hardware processing element","single instruction multiple","instruction multiple data","simd lane run","illustrate exemplary result","exemplary result running","degree parallelization loop","parallelization loop presence","maximum number vector","lane enabled mode","result running code","running code compiled","compiled implementation specification","potentially parallelizable loop","set mode enable","hardware instruction test","maximum number single","number single instruction","multiple data simd","data simd lane","mask control lane","control lane enabled","lane enabled loop","code compiled implementation","implementation specification hardware","specification hardware processing","processing element parallel","lane enabled veclen","parallelizable loop remain","loop remain function","number processing element","runtime set mode","mode enable single","maximum number simd","memory aliase comprising","mode number lane","enable maximum number","vector lane iteration","lane iteration loop","based test memory","potential aliase resolvable","processing element swar","element swar lane","swar lane processing","lane processing element","number lane run","address data element","parallelizing loop presence","determine degree parallelization","addresse runtime set","scalar loop method","amount parallelization enabled","parallelization enabled determined","enabled determined runtime","determined runtime test","runtime test pointer","test pointer aliasing","mode enable maximum","altering number iteration","iteration loop dependent","loop dependent number","dependent number lane","simd staged loop","summation bitwise operation","bitwise operation minimum","operation minimum maximum","minimum maximum vector","maximum vector lane","enabled mode register","iteration loop memory","loop memory location","determining degree parallelization","apparatus processing element","aspect specification disclosed","case alias exist","vector length loop","number simd lane","enabled loop feature","determined potential aliase","processing element vector"],"m_SocialTags":[],"m_Topics":[],"m_Industry":[],"m_Technology":[],"m_BiCnt":[50,48,28,22,21,20,17,16,16,16,15,15,14,13,12,12,11,11,11,10,10,10,10,10,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"m_TriCnt":[29,20,16,15,13,12,11,10,10,10,9,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"m_iDocBodyWordCnt":3658}
